{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8842902,"sourceType":"datasetVersion","datasetId":5322203}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ibrahimchristopher/video-to-text-transcript-using-openai-whisper?scriptVersionId=190434787\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Full Code: Full Match Video to Commentary Text Transcript using ffmpeg and open ai whisper\n\n","metadata":{}},{"cell_type":"markdown","source":"in this project we are going use the following libraries to download a football match highlights video,  extract the audio and transcribe said audio.\n\nthe libraries used are\n\nyt_dlp: for download from youtube\n\nffmpeg: for extracting audio\n\nopen ai whisper: for audio-text transciption","metadata":{}},{"cell_type":"code","source":"##creating a function to download a video from youtube\n!pip install yt-dlp\n\nimport yt_dlp\n\ndef download_youtube_video(url, save_path):\n    try:\n        ydl_opts = {'outtmpl': save_path + '/%(title)s.%(ext)s'}\n        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n            ydl.download([url])\n        print(f\"Downloaded: {url}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n    \n\n# Example usage:\n# download_youtube_video('https://www.youtube.com/watch?v=example', '/path/to/save')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-26T04:02:34.501616Z","iopub.execute_input":"2024-07-26T04:02:34.501992Z","iopub.status.idle":"2024-07-26T04:02:47.042557Z","shell.execute_reply.started":"2024-07-26T04:02:34.501963Z","shell.execute_reply":"2024-07-26T04:02:47.041419Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# URL of the YouTube video\nvideo_url = \"https://www.youtube.com/watch?v=buoMlAshKXQ\"\n\n# Path to save the downloaded video\nsave_path = '/kaggle/working/test2'\n\n# Download the video\ndownload_youtube_video(video_url, save_path)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-26T04:02:57.363075Z","iopub.execute_input":"2024-07-26T04:02:57.363721Z","iopub.status.idle":"2024-07-26T04:03:11.572024Z","shell.execute_reply.started":"2024-07-26T04:02:57.363684Z","shell.execute_reply":"2024-07-26T04:03:11.571039Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"####i will now go ahead to set up a function that leverages ffmpeg, \n####subprocess to extract audo from a videoinput\n\n##extract audio\nimport subprocess\n\ndef extract_audio(input_video_path, output_audio_path):\n    command = [\n        'ffmpeg',\n        '-i', input_video_path,\n        '-q:a', '0',\n        '-map', 'a',\n        output_audio_path\n    ]\n    subprocess.run(command)\n\n# Example usage\n\ninput_video_path = '/kaggle/working/test/Reds complete miracle comeback against Barca： Liverpool 4-0 Barcelona ｜ Champions League.webm'\noutput_audio_path = '/kaggle/working/test.mp3'\nextract_audio(input_video_path, output_audio_path)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-26T03:29:22.819143Z","iopub.execute_input":"2024-07-26T03:29:22.82005Z","iopub.status.idle":"2024-07-26T03:29:27.534352Z","shell.execute_reply.started":"2024-07-26T03:29:22.820017Z","shell.execute_reply":"2024-07-26T03:29:27.53337Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#filepath to audio extracted\naudio_filepath = \"/kaggle/working/test.mp3\"","metadata":{"execution":{"iopub.status.busy":"2024-07-26T03:29:50.192267Z","iopub.execute_input":"2024-07-26T03:29:50.192798Z","iopub.status.idle":"2024-07-26T03:29:50.196687Z","shell.execute_reply.started":"2024-07-26T03:29:50.192768Z","shell.execute_reply":"2024-07-26T03:29:50.195786Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#installing whisper from open ai\n#whisper model by open ai\n!pip install git+https://github.com/openai/whisper.git","metadata":{"execution":{"iopub.status.busy":"2024-07-26T03:30:09.259051Z","iopub.execute_input":"2024-07-26T03:30:09.259626Z","iopub.status.idle":"2024-07-26T03:30:43.546697Z","shell.execute_reply.started":"2024-07-26T03:30:09.259598Z","shell.execute_reply":"2024-07-26T03:30:43.545617Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#importing open ai whisper for transcribing\nimport whisper","metadata":{"execution":{"iopub.status.busy":"2024-07-26T03:30:51.782099Z","iopub.execute_input":"2024-07-26T03:30:51.782909Z","iopub.status.idle":"2024-07-26T03:30:56.372216Z","shell.execute_reply.started":"2024-07-26T03:30:51.782874Z","shell.execute_reply":"2024-07-26T03:30:56.371411Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#loaing the large model into memory\n\nmodel = whisper.load_model('large')","metadata":{"execution":{"iopub.status.busy":"2024-07-26T03:31:02.924283Z","iopub.execute_input":"2024-07-26T03:31:02.925089Z","iopub.status.idle":"2024-07-26T03:31:52.795819Z","shell.execute_reply.started":"2024-07-26T03:31:02.925057Z","shell.execute_reply":"2024-07-26T03:31:52.794631Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import time #to track the number of seconds it takes to make infrence","metadata":{"execution":{"iopub.status.busy":"2024-07-26T03:31:52.797758Z","iopub.execute_input":"2024-07-26T03:31:52.798045Z","iopub.status.idle":"2024-07-26T03:31:52.801963Z","shell.execute_reply.started":"2024-07-26T03:31:52.798022Z","shell.execute_reply":"2024-07-26T03:31:52.801116Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#transcribing the audio\n###also noting the time it takes\nthen = time.time()\nout = model.transcribe(audio_filepath)\nnow =  time.time()\n\nduration = now - then\n\nprint(duration)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T03:35:04.484492Z","iopub.execute_input":"2024-07-26T03:35:04.485325Z","iopub.status.idle":"2024-07-26T03:36:04.766083Z","shell.execute_reply.started":"2024-07-26T03:35:04.485292Z","shell.execute_reply":"2024-07-26T03:36:04.76516Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#printitng the text\ntext = out['text']\n\nprint(text)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T03:45:42.758819Z","iopub.execute_input":"2024-07-26T03:45:42.759628Z","iopub.status.idle":"2024-07-26T03:45:42.764108Z","shell.execute_reply.started":"2024-07-26T03:45:42.759598Z","shell.execute_reply":"2024-07-26T03:45:42.763196Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"text","metadata":{"execution":{"iopub.status.busy":"2024-07-16T23:24:27.273509Z","iopub.execute_input":"2024-07-16T23:24:27.27437Z","iopub.status.idle":"2024-07-16T23:24:27.282234Z","shell.execute_reply.started":"2024-07-16T23:24:27.274328Z","shell.execute_reply":"2024-07-16T23:24:27.281211Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def write_to_txt(filename, text):\n    with open(filename, 'w') as file:\n        file.write(text)\n    print(f\"Text written to {filename}\")\n\n# Example usage:\nwrite_to_txt('test.txt',text)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-26T03:45:59.82287Z","iopub.execute_input":"2024-07-26T03:45:59.823672Z","iopub.status.idle":"2024-07-26T03:45:59.829206Z","shell.execute_reply.started":"2024-07-26T03:45:59.82364Z","shell.execute_reply":"2024-07-26T03:45:59.828301Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **DEMO**: Creating Several Inference Functions","metadata":{}},{"cell_type":"markdown","source":"the cells below account for variouus application start point\n\n* video and audio to transcript\n* link to transcript\n\nRun which cell is best suited for you","metadata":{}},{"cell_type":"code","source":"######audio/vdeo to transcript\n\n#####Follow The Instructions to transcript an already downloaded video\n##if you have the video: you can upload and indicate the the filepatrh below\n\ntype_input = \"audio\" # possible parameters: 'audio', 'video'\nfile_path = \"/kaggle/input/fa-cup-final-audio/fa-final.m4a\" #specify audio path like this: \"path/to/video/or/audio/file\"\noutput_text = \"final_text.txt\" #specify output filepath for transcript like this: \"path/to/txt/file\"\n\n\n\ndef transcribe_from_video_or_audio_to_text(path,output_path, type = type_input):\n    if type == 'video':\n        input_video_path = path\n        audio_filepath = '/kaggle/working/output_audio.mp3'\n        extract_audio(input_video_path, audio_filepath)\n    else:\n        audio_filepath = path\n    \n    out = model.transcribe(audio_filepath)\n    \n    text = out['text']\n    \n    write_to_txt(output_path,text)\ntranscribe_from_video_or_audio_to_text(file_path,output_text)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T04:01:10.001558Z","iopub.execute_input":"2024-07-26T04:01:10.002357Z","iopub.status.idle":"2024-07-26T04:01:11.523333Z","shell.execute_reply.started":"2024-07-26T04:01:10.002323Z","shell.execute_reply":"2024-07-26T04:01:11.522131Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-07-17T00:02:38.257274Z","iopub.execute_input":"2024-07-17T00:02:38.258541Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import shutil\nimport os\n######link to video to audio to transcript\n\n#####Follow The Instructions to transcript a video at an avalaible youtube link\n##specify the youtube link as value for the url variable\n##specify the output text\n\n\nurl = \"https://www.youtube.com/watch?v=buoMlAshKXQ\" # specify youtube link\noutput_text = \"final_text.txt\" #specify output filepath for transcript like this: \"path/to/txt/file\"\n\n\ndef transcribe_from_link_or_audio_to_text(video_url = url,output_path = output_text):\n    #download yutube video\n    path = '/kaggle/working/video'\n    \n    try:\n        shutil.rmtree(path)\n        print(f\"Folder {folder_path} deleted successfully.\")\n    except Exception as e:\n        print(f\"path not yet created: {e}\")\n    \n    download_youtube_video(video_url, path)\n    \n    \n    \n    \n    input_video_path = os.path.join(path, os.listdir(path)[0])\n    audio_filepath = '/kaggle/working/output_audio.mp3'\n    extract_audio(input_video_path, audio_filepath)\n    \n    out = model.transcribe(audio_filepath)\n    \n    text = out['text']\n    \n    write_to_txt(output_path,text)\n    \n    \ntranscribe_from_link_or_audio_to_text()","metadata":{"execution":{"iopub.status.busy":"2024-07-26T04:15:54.01785Z","iopub.execute_input":"2024-07-26T04:15:54.01852Z","iopub.status.idle":"2024-07-26T04:16:48.93533Z","shell.execute_reply.started":"2024-07-26T04:15:54.01849Z","shell.execute_reply":"2024-07-26T04:16:48.934372Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}